#!/usr/bin/env python

import os
import sys
sys.path.insert(0, os.path.join(
   os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
   "lib"
))

from allocator import Allocator
from calendar_fetcher import CalendarService
from calendar_setter import CalendarSetter
from google_client import GoogleAuthentication
from interviewers import fetch_interviewers
from slot_generator import fetch_slots

appointment_calendar_name = "Dev & Web Ops Recruitment"


def main():
    auth = GoogleAuthentication()
    if not auth.credentials_supplied():
        if not auth.initial_auth():
            print("Unable to complete authentication")
            return
        auth.display_credentials()
        return

    creds = auth.get_credentials()
    if not creds:
        print("Credentials supplied were not valid")
        return
    calendar_service = CalendarService(creds)

    cache_dir = os.path.join(
        os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
        "cache",
    )

    slots = fetch_slots(
        calendar_service,
        cache_dir,
        days_back = 28,
        days_forward = 16,
        minimum_warning = 10,
    )
    interviewers = fetch_interviewers(calendar_service, cache_dir)
    allocator = Allocator(slots, interviewers)
    allocator.allocate()
    setter = CalendarSetter(calendar_service)
    print
    allocator.display_interviewer_stats()
    print
    for slot in slots:
        if slot.new and slot.people():
            print "Creating event for {}: {}".format(
                slot.start,
                ", ".join(person.name for person in slot.people()),
            )

    print "Confirm creation: type 'yes'"
    confirm = sys.stdin.readline()
    if confirm.strip().lower() != 'yes':
        print "Cancelled"
        return

    for slot in slots:
        if slot.new and slot.people():
            print "Creating event for {}: {}".format(
                slot.start,
                ", ".join(person.name for person in slot.people()),
            )
            # import pprint;pprint.pprint(slot.placeholder_invitation())
            setter.add_event(
                appointment_calendar_name,
                slot.placeholder_invitation(),
            )


if __name__ == '__main__':
    main()
